
# Sample configuration for local execution of woken

akka {
  loglevel = DEBUG
  stdout-loglevel = WARNING
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-dead-letters = 10

  # a nice way to prevent cold start of extension is to define it to be loaded on actor system start
  extensions += "com.github.levkhomich.akka.tracing.TracingExtension"

  tracing {
    # use this option to disable tracing
    #    enabled = off

    # zipkin collector or scribe host name
    host = "zipkin"

    # collector's port
    #    port = 9410 # default, can be omitted

    # every n'th message should be traced
    # for example, 1 means that every message would be traced, 2 - half of messages, 4 - a fourth part, etc.
    sample-rate = 1
  }

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      receive = on
      autoreceive = off
      lifecycle = on
      fsm = on
      unhandled = on
      event-stream = off
    }
  }

  remote {
    log-sent-messages = off
    log-received-messages = off

    maximum-payload-bytes = 10000000 bytes
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {

      hostname = woken # external (logical) hostname
      port = 8088      # external (logical) port

      bind-hostname = localhost # internal (bind) hostname
      bind-port = 8088          # internal (bind)

      message-frame-size =  10000000b
      send-buffer-size =  10000000b
      receive-buffer-size =  10000000b
      maximum-frame-size = 10000000b
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://woken@woken:8088"
    ]

    roles = ["woken"]

    #role {
    #  workflow.min-nr-of-members = 1
    #  validation.min-nr-of-members = 1
    #}
  }
}

spray.can.server {
  idle-timeout = 300s
  request-timeout = 180s
  ssl-encryption = off
  ssl-tracing = on
}

spray.can.client {
  request-timeout = 20 s
  chunkless-streaming = off
  connecting-timeout = 10s
}

spray.can.host-connector {
  max-connections = 2
  host-connector.max-retries = 2
  pipelining = off
}

app {
  systemName = "woken"
  jobServiceName = "job-service"
  dockerBridgeNetwork = "devtests_default"
  interface = "0.0.0.0"
  port = 8087

  master.router {
    actors {
      mining.limit = 5
      experiment.limit = 5
    }
  }

  basicAuth {
    username = "admin"
    password = "WoKeN"
  }
}

jobs {
  node = "federation"
  owner = "admin@mip.chuv.ch"
  chronosServerUrl = "http://chronos:4400"
  featuresDb = "features"
  resultDb = "woken"
}

db {
  woken {
    jdbc_driver="org.postgresql.Driver"
    jdbc_url="jdbc:postgresql://db:5432/woken"
    user="postgres"
    password="test"
  }

  features {
    jdbc_driver="org.postgresql.Driver"
    jdbc_url="jdbc:postgresql://db:5432/features"
    user="postgres"
    password="test"
  }

  metadata {
    jdbc_driver="org.postgresql.Driver"
    jdbc_url="jdbc:postgresql://db:5432/meta"
    user="postgres"
    password="test"
  }

}

defaultSettings {
  # Default settings for the request service
  request {
    nodes = {}
    inDb = "features"
    outDb = "woken"
    metaDb = "metadata"
    mainTable = "sample_data"

    # The actual Algorithm Library
    functions {
      histograms = {
        image = "hbpmip/python-histograms:0.3.1"
        predictive = false
      }
      statisticsSummary = {
        image = "hbpmip/r-summary-stats:2afe249"
        predictive = false
      }
      anova = {
        image = "hbpmip/python-anova:0.3.1"
        predictive = false
      }
      linearRegression = {
        image = "hbpmip/python-linear-regression:0.0.2"
        predictive = false
      }
      knn = {
        image = "hbpmip/java-rapidminer-knn:0.2.1"
        predictive = true
      }
      naiveBayes = {
        image = "hbpmip/java-rapidminer-naivebayes:0.2.0"
        predictive = true
      }
      # Only for testing
      chaos = {
        image = "hbpmip/chaos-algorithm:0.1.1"
        predictive = true
      }
    }
  }
}
